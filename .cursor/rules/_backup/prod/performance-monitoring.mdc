---
description: Track load, interaction, and processing performance for mobile and web; correlate with analytics.
globs: ["apps/**/components/PerformanceMonitor*", "packages/utils/**/*analytics*", "apps/**/providers/**/*"]
alwaysApply: false
---

# Performance Monitoring

## Mobile (Expo)
- Wrap screens in `apps/mobile/app/components/PerformanceMonitor.tsx`.
- Emit:
  - screen_load (mount time)
  - screen_unload (lifetime)
  - screen_view (screen + loadTime)
  - optional: interaction timings via a small helper

```ts
// apps/mobile/app/components/perf.ts
import { analytics } from '@/lib/services/analytics';

export const markInteraction = (name: string) => {
  const t0 = Date.now();
  return () => analytics.trackPerformance(name, Date.now() - t0, { type: 'interaction' });
};
```

## Web (Next.js) â€” Core Web Vitals
```ts
// apps/web/app/providers/web-vitals.ts
'use client';
import { onCLS, onFID, onLCP, onINP, onTTFB } from 'web-vitals';
import { track } from './analytics'; // your wrapper

export function initWebVitals() {
  const send = (name: string) => (m: any) =>
    track('performance', { name, value: m.value, id: m.id });
  onCLS(send('CLS')); onFID(send('FID')); onLCP(send('LCP'));
  onINP(send('INP')); onTTFB(send('TTFB'));
}
```

## Analytics Contract
```ts
// packages/utils/src/analytics.ts
export interface Analytics {
  trackEvent: (name: string, props?: Record<string, any>) => void;
  trackPerformance: (name: string, value: number, props?: Record<string, any>) => void;
  trackScreenView: (screen: string, durationMs?: number) => void;
}

export const analytics: Analytics = {
  trackEvent: () => {},
  trackPerformance: () => {},
  trackScreenView: () => {},
};
```

## Video/AI Pipelines
- Track: frame extraction time, model inference time, audio analysis time, TTS generation time.
- Store run metrics with job IDs; emit progress events to Supabase Realtime.

## Budget/Alerts
- Define SLOs for load time and processing stages; alert when breached.

